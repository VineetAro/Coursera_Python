# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_vel = [-random.randrange(60, 180)/60,random.randrange(120, 240)/60]
paddle1_pos = HEIGHT/2 
paddle2_pos = HEIGHT/2
ball_pos = [WIDTH/2,HEIGHT/2]



# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left

        
def spawn_ball(direction):
    global ball_pos, ball_vel# these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    ball_vel[1] = -random.randrange(60, 180)/60
    if direction == "RIGHT":
        ball_vel[0] = random.randrange(120, 240)/60
    else:
        ball_vel[0] = -random.randrange(120, 240)/60
    


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    if random.randrange(0,11) % 2 == 0:
        spawn_ball("RIGHT")
    else:
        spawn_ball("LEFT")

def draw(canvas):
    global paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global score1, score2
    global paddle1_vel, paddle2_vel
           
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos < (HALF_PAD_HEIGHT) and paddle1_vel < 0: 
        paddle1_vel = 0
    if paddle1_pos > (HEIGHT - (HALF_PAD_HEIGHT)) and paddle1_vel > 0:
        paddle1_vel = 0
    
    if paddle2_pos < (HALF_PAD_HEIGHT) and paddle2_vel < 0: 
        paddle2_vel = 0
    if paddle2_pos > (HEIGHT - (HALF_PAD_HEIGHT)) and paddle2_vel > 0:
        paddle2_vel = 0
    
 
    

    
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos - HALF_PAD_HEIGHT), (0, paddle1_pos + HALF_PAD_HEIGHT), (PAD_WIDTH - 2, paddle1_pos + HALF_PAD_HEIGHT), (PAD_WIDTH - 2, paddle1_pos - HALF_PAD_HEIGHT)], PAD_WIDTH - 1, "Green", "Green")
    canvas.draw_polygon([(WIDTH, paddle2_pos - HALF_PAD_HEIGHT), (WIDTH, paddle2_pos + HALF_PAD_HEIGHT), (WIDTH - PAD_WIDTH + 2, paddle2_pos + HALF_PAD_HEIGHT), (WIDTH - PAD_WIDTH + 2, paddle2_pos - HALF_PAD_HEIGHT)], PAD_WIDTH - 1, "Magenta", "Magenta")
    
    # determine whether paddle and ball collide 
    
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    
    if ball_pos[1] >= (HEIGHT - BALL_RADIUS) or ball_pos[1] <= (BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
        
    if ball_pos[0] <= (PAD_WIDTH + BALL_RADIUS):
        if ball_pos[1] < (paddle1_pos - HALF_PAD_HEIGHT) or ball_pos[1] > (paddle1_pos + HALF_PAD_HEIGHT):
            spawn_ball("RIGHT")
            score2 += 1
        else:
            ball_vel[0] = -ball_vel[0] * 1.1
            
    if  ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):
        if ball_pos[1] < (paddle2_pos - HALF_PAD_HEIGHT) or ball_pos[1] > (paddle2_pos + HALF_PAD_HEIGHT):
            spawn_ball("LEFT")
            score1 += 1
        else:
            ball_vel[0] = -ball_vel[0] * 1.1
      
   
    # draw scores
    canvas.draw_text("Player 1", ((WIDTH/2) - 100, (HEIGHT/2) - 150), 20, 'White')
    canvas.draw_text(str(score1), ((WIDTH/2) - 80, (HEIGHT/2) - 125), 18, 'White')
    canvas.draw_text("Player 2", ((WIDTH/2) + 30, (HEIGHT/2) - 150), 20, 'White')
    canvas.draw_text(str(score2), ((WIDTH/2) + 50, (HEIGHT/2) - 125), 18, 'White')
        
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    if key==simplegui.KEY_MAP["q"]:
        if score1 > 21:
            paddle1_vel = -5
        else:
            paddle1_vel = -4
    if key==simplegui.KEY_MAP["a"]:
        if score1 > 21:
            paddle1_vel = 5
        else:
            paddle1_vel = 4
               
    if key==simplegui.KEY_MAP["up"]:
        if score2 > 2:
            paddle2_vel = -5
        else:
            paddle2_vel = -4
    if key==simplegui.KEY_MAP["down"]:
        if score2 > 2:
            paddle2_vel = 5
        else:
            paddle2_vel = 4
  
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    
    if key==simplegui.KEY_MAP["q"] or key==simplegui.KEY_MAP["a"]:
        paddle1_vel = 0
       
    if key==simplegui.KEY_MAP["up"] or key==simplegui.KEY_MAP["down"]:
        paddle2_vel = 0 

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', new_game)


# start frame
new_game()
frame.start()
